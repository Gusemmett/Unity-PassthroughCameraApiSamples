using System;
using Cysharp.Net.Http;
using Grpc.Net.Client;
using UnityEngine;
using System.Threading.Tasks;

namespace ARFlow
{
    /// <summary>
    /// gRPC client for ARFlow server registration and data frame transmission.
    /// </summary>
    public class ARFlowClient : IDisposable
    {
        private readonly GrpcChannel _channel;
        private readonly ARFlowService.ARFlowServiceClient _client;
        private string _sessionId;
        private bool _disposed = false;

        /// <summary>
        /// Initialize the client with server address.
        /// </summary>
        /// <param name="address">Server URL to connect to</param>
        public ARFlowClient(string address)
        {
            var handler = new YetAnotherHttpHandler() { Http2Only = true };
            _channel = GrpcChannel.ForAddress(address, new GrpcChannelOptions()
            {
                HttpHandler = handler,
                MaxReceiveMessageSize = null
            });
            _client = new ARFlowService.ARFlowServiceClient(_channel);
        }

        /// <summary>
        /// Connect to the server with a request that contain register data of about the camera.
        /// </summary>
        /// <param name="requestData">Register data (AKA metadata) of the camera. The typing of this is generated by Protobuf.</param>
        public void Connect(RegisterRequest requestData)
        {
            if (_disposed) throw new ObjectDisposedException(nameof(ARFlowClient));
            try
            {
                var response = _client.register(requestData);
                _sessionId = response.Uid;
            }
            catch (Exception e)
            {
                Debug.LogError($"[ARFlowClient] Connection error: {e.ToString()}");
                throw;
            }
        }

        /// <summary>
        /// Send a data of a frame to the server.
        /// </summary>
        /// <param name="frameData">Data of the frame. The typing of this is generated by Protobuf.</param>
        public string SendFrame(DataFrameRequest frameData)
        {
            if (_disposed) throw new ObjectDisposedException(nameof(ARFlowClient));
            if (string.IsNullOrEmpty(_sessionId))
            {
                Debug.LogError("[ARFlowClient] SendFrame called before successful connection (sessionId is null or empty).");
                return "Error: Not connected";
            }
            
            string res = "";
            frameData.Uid = _sessionId;
            try
            {
                var response = _client.data_frame(frameData);
                res = response.Message;
            }
            catch (Exception e)
            {
                Debug.LogError($"[ARFlowClient] SendFrame error: {e.ToString()}");
                res = $"Error: {e.Message}"; 
            }
            return res;
        }

        /// <summary>
        /// Send frame data to server asynchronously.
        /// </summary>
        /// <param name="frameData">Frame data to send</param>
        public async Task<string> SendFrameAsync(DataFrameRequest frameData)
        {
            if (_disposed) throw new ObjectDisposedException(nameof(ARFlowClient));
            if (string.IsNullOrEmpty(_sessionId))
            {
                Debug.LogError("[ARFlowClient] SendFrameAsync called before successful connection (sessionId is null or empty).");
                return "Error: Not connected";
            }
            
            string res = "";
            frameData.Uid = _sessionId;
            try
            {
                var response = await _client.data_frameAsync(frameData);
                res = response.Message;
            }
            catch (Exception e)
            {
                Debug.LogError($"[ARFlowClient] SendFrameAsync error: {e.ToString()}");
                res = $"Error: {e.Message}"; 
            }
            return res;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (_disposed) return;

            if (disposing)
            {
                _channel?.Dispose();
            }
            _disposed = true;
        }
    }
}
